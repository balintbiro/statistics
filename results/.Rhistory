#cumulative frequency with ordinal vairables
#lets say these are the frquencies of grades
my_sample<-c(123,210,212,321,213)
#calculating means
my_mean<-mean(my_sample)
my_mean
#calculata the range of a sample
my_range<-range(my_sample)
my_range
#interquartile range
my_sample<-c(21,32,12,4,3,65,4,34,43,44,232,432,12,1,32,3245,2,34,5676,9,9,7676,56,6)
my_sample
my_quantiles<-quantile(my_sample, probs=c(0.25,0.75))
my_quantiles
my_quantiles[0]
my_quantiles
my_quantiles<-IQR(my_sample)
my_quantiles
#variance and standard deviation
my_var<-var(my_sample)
my_var
my_sd<-sd(my_sample)
my_sd
#description of a sample
my_summary<-summary(my_sample)
my_summary
boxplot(my_sample)
#description of a sample
my_sample<-c(1,2,2,4,5,2,1,5,6,7,8,2,4,5,2,1,3,5)
my_summary<-summary(my_sample)
boxplot(my_sample)
boxplot(my_sample)
var_b<-c(12,21,31,45,51,67,71,83,99,109)
my_corr<-corr(var_a,var_b)
my_corr<-cor(var_a,var_b)
#two types of correlation
var_a<-c(1,2,3,4,5,6,7,8,9,10)
var_b<-c(12,21,31,45,51,67,71,83,99,109)
my_corr<-cor(var_a,var_b)
my_corr
my_corr<-cor(var_a,var_b, method='spearman')
my_corr
my_corr<-cor(var_a,var_b, method='pearson')
my_corr
#confidence interval
my_sample<-c(1,2,3,1,2,3,1,3,1,2,1,2,3,1,2,231,3,1,2,1,3,12,1,3,12,2,3,12,3,123,31,2,1,23,13,3,2,44,4,5,2,34,1,2,3,12,31,2,1)
my_sample
my_ci<-ci(my_sample)
#confidence interval
library(gmodels)
#confidence interval
install.packages("gmodels")
library(gmodels)
my_sample<-c(1,2,3,1,2,3,1,3,1,2,1,2,3,1,2,231,3,1,2,1,3,12,1,3,12,2,3,12,3,123,31,2,1,23,13,3,2,44,4,5,2,34,1,2,3,12,31,2,1)
my_ci<-ci(my_sample)
ci(my_sample)
my_ci<-ci(my_sample)
my_ci
my_ci<-ci(my_sample, confidence = 0.95)
my_ci
my_ci<-ci(my_sample, confidence = 0.9)
my_ci
my_ci<-ci(my_sample, confidence = 0.95)
my_ci
#create variable
my_sample<-c(1,2,1,3,2,2,3,4,2,3,4,5,1,2,3,1,4,5,3,2,4,5,2,2,4,2,4,2,3,4,2,3,2,4,4,2,3)
mean(my_sample)
#set seed for consistency/reproducibility
set.seed(1)
length(my_sample)
#number of required samplesize for bootstraping (=length of my_sample)
samplesize<-length(my_sample)
samplesize
#number of repetition for bootstraping
repetitions<-10000
proba<-(my_sample, size=10, replace = TRUE)
proba<-sample(my_sample, size=10, replace = TRUE)
proba
ncol=samplesize, nrow=repetitions)
proba<-matrix((sample(my_sample, size=samplesize*repetitions,
replace = TRUE), ncol=samplesize, nrow=repetitions))
proba<-matrix((sample(my_sample, size=samplesize*repetitions,
replace = TRUE),ncol=samplesize, nrow=repetitions))
ncol=samplesize, nrow=repetitions)
proba<-matrix(sample(my_sample, size=samplesize*repetitions, replace = TRUE),
ncol=samplesize, nrow=repetitions)
proba[1:5,1:5]
bootstrap_samples<-matrix(sample(my_sample, size=samplesize*repetitions, replace = TRUE),
ncol=samplesize, nrow=repetitions)
dim(bootstrap_samples)
bootstrap_samples<-matrix(sample(my_sample, size=repetitions*samplesize, replace = TRUE),
ncol=samplesize, nrow=repetitions)
dim(bootstrap_samples)
bootstrap_samples<-matrix(sample(my_sample, size=samplesize*repetitions, replace = TRUE),
ncol=samplesize, nrow=repetitions)
dim(bootstrap_samples)
bootstrap_samples<-matrix(sample(my_sample, size=samplesize*repetitions, replace = TRUE),
ncol=repetitions, nrow=samplesize)
dim(bootstrap_samples)
#create variable
my_variable<-c(1,2,1,3,2,2,3,4,2,3,4,5,1,2,3,1,4,5,3,2,4,5,2,2,4,2,4,2,3,4,2,3,2,4,4,2,3)
#set seed for consistency/reproducibility
set.seed(1)
#number of required samplesize for bootstraping (=length of my_sample)
samplesize<-length(my_variable)
#number of repetition for bootstraping
repetitions<-10000
#sample the
bootstrap_samples<-matrix(sample(my_variable, size=samplesize*repetitions, replace = TRUE),
ncol=repetitions, nrow=samplesize)
dim(bootstrap_samples)
bootstrap_samples[1:5,1:5]
bootstrap_means<-colMeans(bootstrap_samples)
bootstrap_means
dim(bootstrap_means)
length(bootstrap_means)
#building a bootstrap confidence interval with the percentile method
quantile(bootstrap_means, prob=0.025)
quantile(bootstrap_means, prob=0.975)
#building a bootstrap confidence interval with the percentile method
low_quantile(bootstrap_means, prob=0.025)
#building a bootstrap confidence interval with the percentile method
lower_limit<-quantile(bootstrap_means, prob=0.025)
#building a bootstrap confidence interval with the percentile method
lower_ci_limit<-quantile(bootstrap_means, prob=0.025)
higher_ci_limit<-quantile(bootstrap_means, prob=0.975)
lower_ci_limit
higher_ci_limit
library(gmodels)
my_sample<-c(1,2,1,3,2,2,3,4,2,3,4,5,1,2,3,1,4,5,3,2,4,5,2,2,4,2,4,2,3,4,2,3,2,4,4,2,3)
my_ci<-ci(my_sample, confidence = 0.95)
my_ci
#building a bootstrap confidence interval with the percentile method
lower_ci_limit<-quantile(bootstrap_means, prob=0.025)
higher_ci_limit<-quantile(bootstrap_means, prob=0.975)
lower_ci_limit
higher_ci_limit
#create variable
my_variable<-c(123,120,120,121,124,231,210,215,542,21,121,213,102,654,332,432,546,767,877,657,879,321,123,435,654,657,433,767,456)
#set seed for consistency/reproducibility
set.seed(1)
#number of required samplesize for bootstraping (=length of my_sample)
samplesize<-length(my_variable)
#number of repetition for bootstraping
repetitions<-10000
#sample the variable for the required times with replacement and load the results into a matrix
bootstrap_samples<-matrix(sample(my_variable, size=samplesize*repetitions, replace = TRUE),
ncol=repetitions, nrow=samplesize)
dim(bootstrap_samples)#check the dimsensions of our matrix
#calculate the mean for every bootstrap samples (it will give 10000 means)
bootstrap_means<-colMeans(bootstrap_samples)
#building a bootstrap confidence interval with the percentile method
lower_ci_limit<-quantile(bootstrap_means, prob=0.025)
higher_ci_limit<-quantile(bootstrap_means, prob=0.975)
lower_ci_limit
higher_ci_limit
library(gmodels)
ci(my_variable)
#one sample version
#in this case we compare our value to a hypothetical one
my_variable<-c(1,3,1,3,4,1,1,2,4,1,2,3,4,1,2,4,2,4,2,1,3,4,4,1,3,4)
#create a variable and get mean and sd
x<-seq(from=1,
to=50,
length.out=2000)
x_mean<-mean(x)
x_sd<-sd(x)
#define a function for calculating normal distribution
normal_dist<-function(x,mean,sd){
prob_density<-(pi*sd)*exp(-0.5*((x-mean)/sd)**2)
return(prob_density)
}
#apply the previously defined function
pdf<-sapply(x,
normal_dist,
mean=x_mean,
sd=x_sd)
#visualize the probabilty density function
setwd('../results/')
png(file='pdf.png')
plot(x,pdf)
dev.off()
#define a function for getting cumulative distribution function
cd_function<-function(element){
container<<-append(container,element)
return(sum(container)/sum(pdf))
}
#define global variable
container<<-c()
#make the function work and visualize cdf
cdf<-sapply(pdf,cd_function)
png(file='cdf.png')
plot(x,cdf)
dev.off()
